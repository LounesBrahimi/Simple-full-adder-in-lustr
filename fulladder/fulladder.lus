
(* Heptagon 1.05 does not implement the `xor` operator properly.
   The work-around is to use `<>`. *)

node full_add(a, b, c : bool) returns (s, co : bool);
var xor1, and1, and2, and3, xor2, or1, or2 : bool;
let
  xor1 = (a <> b);
  and1 = (a and b);
  and2 = (b and c);
  and3 = (a and c);
  xor2 = (xor1 <> c);
  or1 = (and1 or and2);
  or2 = (or1 or and3);
  s = xor2;
  co = or2;
tel;

node half_add(a, b : bool) returns (s, co : bool);
let
  s = (a <> b);
  co = (a and b);
tel;

node full_add_h(a, b, c : bool) returns (s, co : bool);
var s1, c1, c2 : bool;
let
  (s1, c1) = half_add(a, b);
  (s, c2) = half_add(c,s1 );
  co = (c1 or c2);
tel;

node equivalence(a, b, c : bool) returns (ok : bool);
var s1, s2, co1, co2 : bool;
let  
  (s1, co1) = full_add_h(a, b, c);
  (s2, co2) = full_add(a, b, c);
  ok = if ((s1 = s2) and (co1 = co2)) then true else false;
tel;

